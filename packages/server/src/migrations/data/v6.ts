import { CustomMigrationAction, CustomPostDeployMigration } from './types';
import * as fns from '../migrate-functions';
import { prepareCustomMigrationJobData, runCustomMigration } from '../../workers/post-deploy-migration';
import { withLongRunningDatabaseClient } from '../migration-utils';
import { globalLogger } from '../../logger';
import { MigrationFunctionContext } from '../migrate-functions';
import { waitForQueueClosing } from '../../workers/utils';

export const migration: CustomPostDeployMigration = {
  type: 'custom',
  prepareJobData: (asyncJob) => prepareCustomMigrationJobData(asyncJob),
  run: async (repo, job, jobData) => {
    return runCustomMigration(repo, job, jobData, async () => {
      return withLongRunningDatabaseClient(async (client) => {
        const actions: CustomMigrationAction[] = [];
        const completedSteps = jobData.completedSteps;
        let lastCompletedStep = completedSteps[completedSteps.length - 1];
        const intervalId = setInterval(() => {
          globalLogger.info('Checking for completedSteps...');
          if (lastCompletedStep !== completedSteps[completedSteps.length - 1]) {
            lastCompletedStep = completedSteps[completedSteps.length - 1];
            globalLogger.info('Completed steps updated', { lastCompletedStep });
          }
        }, 5000);

        const promises = [run({ client, actions, completedSteps })];
        if (job?.queueName) {
          promises.push(waitForQueueClosing(job.queueName, 60_000));
        }
        await Promise.all(promises);

        clearInterval(intervalId);
        return { actions };
      });
    });
  },
};

// prettier-ignore
async function run(ctx: MigrationFunctionContext): Promise<void> {
  await fns.analyzeTable(ctx, '1', 'Account');
  await fns.analyzeTable(ctx, '2', 'ActivityDefinition');
  await fns.analyzeTable(ctx, '3', 'AdverseEvent');
  await fns.analyzeTable(ctx, '4', 'AllergyIntolerance');
  await fns.analyzeTable(ctx, '5', 'Appointment');
  await fns.analyzeTable(ctx, '6', 'AppointmentResponse');
  await fns.analyzeTable(ctx, '7', 'AuditEvent');
  await fns.analyzeTable(ctx, '8', 'Basic');
  await fns.analyzeTable(ctx, '9', 'Binary');
  await fns.analyzeTable(ctx, '10', 'BiologicallyDerivedProduct');
  await fns.analyzeTable(ctx, '11', 'BodyStructure');
  await fns.analyzeTable(ctx, '12', 'Bundle');
  await fns.analyzeTable(ctx, '13', 'CapabilityStatement');
  await fns.analyzeTable(ctx, '14', 'CarePlan');
  await fns.analyzeTable(ctx, '15', 'CareTeam');
  await fns.analyzeTable(ctx, '16', 'CatalogEntry');
  await fns.analyzeTable(ctx, '17', 'ChargeItem');
  await fns.analyzeTable(ctx, '18', 'ChargeItemDefinition');
  await fns.analyzeTable(ctx, '19', 'Claim');
  await fns.analyzeTable(ctx, '20', 'ClaimResponse');
  await fns.analyzeTable(ctx, '21', 'ClinicalImpression');
  await fns.analyzeTable(ctx, '22', 'CodeSystem');
  await fns.analyzeTable(ctx, '23', 'Communication');
  await fns.analyzeTable(ctx, '24', 'CommunicationRequest');
  await fns.analyzeTable(ctx, '25', 'CompartmentDefinition');
  await fns.analyzeTable(ctx, '26', 'Composition');
  await fns.analyzeTable(ctx, '27', 'ConceptMap');
  await fns.analyzeTable(ctx, '28', 'Condition');
  await fns.analyzeTable(ctx, '29', 'Consent');
  await fns.analyzeTable(ctx, '30', 'Contract');
  await fns.analyzeTable(ctx, '31', 'Coverage');
  await fns.analyzeTable(ctx, '32', 'CoverageEligibilityRequest');
  await fns.analyzeTable(ctx, '33', 'CoverageEligibilityResponse');
  await fns.analyzeTable(ctx, '34', 'DetectedIssue');
  await fns.analyzeTable(ctx, '35', 'Device');
  await fns.analyzeTable(ctx, '36', 'DeviceDefinition');
  await fns.analyzeTable(ctx, '37', 'DeviceMetric');
  await fns.analyzeTable(ctx, '38', 'DeviceRequest');
  await fns.analyzeTable(ctx, '39', 'DeviceUseStatement');
  await fns.analyzeTable(ctx, '40', 'DiagnosticReport');
  await fns.analyzeTable(ctx, '41', 'DocumentManifest');
  await fns.analyzeTable(ctx, '42', 'DocumentReference');
  await fns.analyzeTable(ctx, '43', 'EffectEvidenceSynthesis');
  await fns.analyzeTable(ctx, '44', 'Encounter');
  await fns.analyzeTable(ctx, '45', 'Endpoint');
  await fns.analyzeTable(ctx, '46', 'EnrollmentRequest');
  await fns.analyzeTable(ctx, '47', 'EnrollmentResponse');
  await fns.analyzeTable(ctx, '48', 'EpisodeOfCare');
  await fns.analyzeTable(ctx, '49', 'EventDefinition');
  await fns.analyzeTable(ctx, '50', 'Evidence');
  await fns.analyzeTable(ctx, '51', 'EvidenceVariable');
  await fns.analyzeTable(ctx, '52', 'ExampleScenario');
  await fns.analyzeTable(ctx, '53', 'ExplanationOfBenefit');
  await fns.analyzeTable(ctx, '54', 'FamilyMemberHistory');
  await fns.analyzeTable(ctx, '55', 'Flag');
  await fns.analyzeTable(ctx, '56', 'Goal');
  await fns.analyzeTable(ctx, '57', 'GraphDefinition');
  await fns.analyzeTable(ctx, '58', 'Group');
  await fns.analyzeTable(ctx, '59', 'GuidanceResponse');
  await fns.analyzeTable(ctx, '60', 'HealthcareService');
  await fns.analyzeTable(ctx, '61', 'ImagingStudy');
  await fns.analyzeTable(ctx, '62', 'Immunization');
  await fns.analyzeTable(ctx, '63', 'ImmunizationEvaluation');
  await fns.analyzeTable(ctx, '64', 'ImmunizationRecommendation');
  await fns.analyzeTable(ctx, '65', 'ImplementationGuide');
  await fns.analyzeTable(ctx, '66', 'InsurancePlan');
  await fns.analyzeTable(ctx, '67', 'Invoice');
  await fns.analyzeTable(ctx, '68', 'Library');
  await fns.analyzeTable(ctx, '69', 'Linkage');
  await fns.analyzeTable(ctx, '70', 'List');
  await fns.analyzeTable(ctx, '71', 'Location');
  await fns.analyzeTable(ctx, '72', 'Measure');
  await fns.analyzeTable(ctx, '73', 'MeasureReport');
  await fns.analyzeTable(ctx, '74', 'Media');
  await fns.analyzeTable(ctx, '75', 'Medication');
  await fns.analyzeTable(ctx, '76', 'MedicationAdministration');
  await fns.analyzeTable(ctx, '77', 'MedicationDispense');
  await fns.analyzeTable(ctx, '78', 'MedicationKnowledge');
  await fns.analyzeTable(ctx, '79', 'MedicationRequest');
  await fns.analyzeTable(ctx, '80', 'MedicationStatement');
  await fns.analyzeTable(ctx, '81', 'MedicinalProduct');
  await fns.analyzeTable(ctx, '82', 'MedicinalProductAuthorization');
  await fns.analyzeTable(ctx, '83', 'MedicinalProductContraindication');
  await fns.analyzeTable(ctx, '84', 'MedicinalProductIndication');
  await fns.analyzeTable(ctx, '85', 'MedicinalProductIngredient');
  await fns.analyzeTable(ctx, '86', 'MedicinalProductInteraction');
  await fns.analyzeTable(ctx, '87', 'MedicinalProductManufactured');
  await fns.analyzeTable(ctx, '88', 'MedicinalProductPackaged');
  await fns.analyzeTable(ctx, '89', 'MedicinalProductPharmaceutical');
  await fns.analyzeTable(ctx, '90', 'MedicinalProductUndesirableEffect');
  await fns.analyzeTable(ctx, '91', 'MessageDefinition');
  await fns.analyzeTable(ctx, '92', 'MessageHeader');
  await fns.analyzeTable(ctx, '93', 'MolecularSequence');
  await fns.analyzeTable(ctx, '94', 'NamingSystem');
  await fns.analyzeTable(ctx, '95', 'NutritionOrder');
  await fns.analyzeTable(ctx, '96', 'Observation');
  await fns.analyzeTable(ctx, '97', 'ObservationDefinition');
  await fns.analyzeTable(ctx, '98', 'OperationDefinition');
  await fns.analyzeTable(ctx, '99', 'OperationOutcome');
  await fns.analyzeTable(ctx, '100', 'Organization');
  await fns.analyzeTable(ctx, '101', 'OrganizationAffiliation');
  await fns.analyzeTable(ctx, '102', 'Parameters');
  await fns.analyzeTable(ctx, '103', 'Patient');
  await fns.analyzeTable(ctx, '104', 'PaymentNotice');
  await fns.analyzeTable(ctx, '105', 'PaymentReconciliation');
  await fns.analyzeTable(ctx, '106', 'Person');
  await fns.analyzeTable(ctx, '107', 'PlanDefinition');
  await fns.analyzeTable(ctx, '108', 'Practitioner');
  await fns.analyzeTable(ctx, '109', 'PractitionerRole');
  await fns.analyzeTable(ctx, '110', 'Procedure');
  await fns.analyzeTable(ctx, '111', 'Provenance');
  await fns.analyzeTable(ctx, '112', 'Questionnaire');
  await fns.analyzeTable(ctx, '113', 'QuestionnaireResponse');
  await fns.analyzeTable(ctx, '114', 'RelatedPerson');
  await fns.analyzeTable(ctx, '115', 'RequestGroup');
  await fns.analyzeTable(ctx, '116', 'ResearchDefinition');
  await fns.analyzeTable(ctx, '117', 'ResearchElementDefinition');
  await fns.analyzeTable(ctx, '118', 'ResearchStudy');
  await fns.analyzeTable(ctx, '119', 'ResearchSubject');
  await fns.analyzeTable(ctx, '120', 'RiskAssessment');
  await fns.analyzeTable(ctx, '121', 'RiskEvidenceSynthesis');
  await fns.analyzeTable(ctx, '122', 'Schedule');
  await fns.analyzeTable(ctx, '123', 'SearchParameter');
  await fns.analyzeTable(ctx, '124', 'ServiceRequest');
  await fns.analyzeTable(ctx, '125', 'Slot');
  await fns.analyzeTable(ctx, '126', 'Specimen');
  await fns.analyzeTable(ctx, '127', 'SpecimenDefinition');
  await fns.analyzeTable(ctx, '128', 'StructureDefinition');
  await fns.analyzeTable(ctx, '129', 'StructureMap');
  await fns.analyzeTable(ctx, '130', 'Subscription');
  await fns.analyzeTable(ctx, '131', 'SubscriptionStatus');
  await fns.analyzeTable(ctx, '132', 'Substance');
  await fns.analyzeTable(ctx, '133', 'SubstanceNucleicAcid');
  await fns.analyzeTable(ctx, '134', 'SubstancePolymer');
  await fns.analyzeTable(ctx, '135', 'SubstanceProtein');
  await fns.analyzeTable(ctx, '136', 'SubstanceReferenceInformation');
  await fns.analyzeTable(ctx, '137', 'SubstanceSourceMaterial');
  await fns.analyzeTable(ctx, '138', 'SubstanceSpecification');
  await fns.analyzeTable(ctx, '139', 'SupplyDelivery');
  await fns.analyzeTable(ctx, '140', 'SupplyRequest');
  await fns.analyzeTable(ctx, '141', 'Task');
  await fns.analyzeTable(ctx, '142', 'TerminologyCapabilities');
  await fns.analyzeTable(ctx, '143', 'TestReport');
  await fns.analyzeTable(ctx, '144', 'TestScript');
  await fns.analyzeTable(ctx, '145', 'ValueSet');
  await fns.analyzeTable(ctx, '146', 'VerificationResult');
  await fns.analyzeTable(ctx, '147', 'VisionPrescription');
  await fns.analyzeTable(ctx, '148', 'Project');
  await fns.analyzeTable(ctx, '149', 'ClientApplication');
  await fns.analyzeTable(ctx, '150', 'User');
  await fns.analyzeTable(ctx, '151', 'ProjectMembership');
  await fns.analyzeTable(ctx, '152', 'Bot');
  await fns.analyzeTable(ctx, '153', 'Login');
  await fns.analyzeTable(ctx, '154', 'PasswordChangeRequest');
  await fns.analyzeTable(ctx, '155', 'UserSecurityRequest');
  await fns.analyzeTable(ctx, '156', 'JsonWebKey');
  await fns.analyzeTable(ctx, '157', 'AccessPolicy');
  await fns.analyzeTable(ctx, '158', 'UserConfiguration');
  await fns.analyzeTable(ctx, '159', 'BulkDataExport');
  await fns.analyzeTable(ctx, '160', 'SmartAppLaunch');
  await fns.analyzeTable(ctx, '161', 'DomainConfiguration');
  await fns.analyzeTable(ctx, '162', 'AsyncJob');
  await fns.analyzeTable(ctx, '163', 'Agent');
}
